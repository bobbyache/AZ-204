What is a shared access signature (SAS)?|A URI that grants restricted access rights to Azure Storage resources.
What does a shared access signature (SAS) provide?|Delegate access to certain storage account resources.
How is a shared access signature (SAS) constructed?|The signature is constructed from the SAS parameters and signed with the key used to create the SAS.
What is the purpose of the signature in a shared access signature (SAS)?|It is used by Azure Storage to authorize access to the storage resource.
What are the three types of shared access signatures supported by Azure Storage?|User delegation SAS, service SAS, and account SAS.
What services can a service SAS delegate access to?|Blob storage, Queue storage, Table storage, or Azure Files.
What is the recommended approach for security when using shared access signatures?|Use Azure Active Directory credentials whenever possible instead of the account key.
When should you use Azure Active Directory credentials to create a user delegation SAS?|When your application design requires shared access signatures for access to Blob storage.
What are the two components required to access data stored in Azure Storage using a SAS?|A URI to the resource and a SAS token.
What does the SAS token authorize?|Access to the specified resource.
What guidance does Microsoft provide to reduce the risks of using a SAS?|Use HTTPS for secure distribution, prioritize user delegation SAS for superior security, set expiration time to the smallest useful value, apply the rule of minimum-required privileges, and consider alternative solutions when necessary.
When should you consider alternative solutions to a SAS?|When there's an unacceptable risk associated with using a SAS, create a middle-tier service to manage users and their access to storage.
What are the primary benefits of using shared access signatures (SAS) in Azure Storage?|Granular access control, time-limited access, and reduced exposure of account keys.
How does a shared access signature (SAS) provide granular access control?|By specifying the permissions and resources that can be accessed.
What is the difference between a user delegation SAS and a service SAS?|A user delegation SAS is secured with Azure Active Directory credentials and applies to Blob storage only, while a service SAS is secured with the storage account key and delegates access to various Azure Storage services.
When should you use a user delegation SAS instead of a service SAS?|When you need to secure access to Blob storage and want to utilize Azure Active Directory credentials for enhanced security.
How can you enforce read-only access for a shared access signature (SAS)?|By specifying the appropriate permissions in the SAS, allowing read access but disallowing write or delete operations.
What is the advantage of enforcing read-only access in a SAS?|It limits the capabilities of the client to only view or retrieve data without the ability to modify or delete it.
What is the purpose of setting an expiration time for a shared access signature (SAS)?|To limit the validity period of the SAS and reduce the potential risk if the SAS is compromised.
How should you determine the expiration time for a SAS?|Set it to the smallest useful value, allowing sufficient time for the intended operations but minimizing the window of vulnerability in case of compromise.
What are the additional security considerations for using a shared access signature (SAS)?|Always use HTTPS for secure communication, follow the principle of least privilege by granting only the necessary access, and consider alternative solutions when a SAS is not suitable for the risk profile.
What is the principle of least privilege?|It means granting only the minimum level of access required to perform the intended operations, reducing the potential attack surface.
When should you use a SAS?|You should use a SAS when you want to provide secure access to resources in your storage account to any client who doesn't otherwise have permissions to those resources.
What is a common scenario where a SAS is useful?|A common scenario where a SAS is useful is a service where users read and write their own data to your storage account.
What are the two typical design patterns for storing user data in a storage account?|The two typical design patterns are clients uploading and downloading data via a front-end proxy service, or a lightweight service generating a SAS for direct access to storage account resources.
What advantage does a front-end proxy service have in handling user data?|A front-end proxy service has the advantage of allowing validation of business rules.
When might creating a service that can scale to match demand be challenging?|Creating a service that can scale to match demand may be expensive or difficult for handling large amounts of data or high-volume transactions.
How does a SAS mitigate the need for routing all data through the front-end proxy service?|A SAS allows the client application to access storage account resources directly with the permissions defined by the SAS and for the interval allowed by the SAS.
How might real-world services use a hybrid approach for data processing?|Real-world services might process and validate some data via the front-end proxy while saving and/or reading other data directly using SAS.
In what scenarios is a SAS required to authorize access to the source object in a copy operation?|A SAS is required to authorize access to the source object in a copy operation when copying a blob to another blob in a different storage account or when copying a file to another file in a different storage account.
What can you optionally use a SAS for when copying a blob or file to a different destination?|You can optionally use a SAS to authorize access to the destination blob or file when performing a copy operation across storage accounts.
What is the requirement for using a SAS to authorize access when copying a blob to a file, or a file to a blob within the same storage account?|Even if the source and destination objects reside within the same storage account, a SAS is required to authorize access to the source object in a copy operation.
