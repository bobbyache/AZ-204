What is Durable Functions?|Durable Functions is a serverless compute extension of Azure Functions that allows you to write stateful functions.
What are the two types of functions introduced by Durable Functions?|Durable Functions introduces Orchestrator functions and Entity functions.
What is the purpose of Orchestrator functions?|Orchestrator functions define stateful workflows, implicitly representing state via control flow.
What is the purpose of Entity functions?|Entity functions manage the state of an entity, explicitly representing state.
How are workflows defined in Durable Functions?|Workflows are defined in code without the need for JSON schemas or designers.
How can Durable Functions call other functions?|Durable Functions can call other functions both synchronously and asynchronously.
What can be done with the output from called functions in Durable Functions?|The output from called functions can be saved to local variables.
When does Durable Functions automatically checkpoint their progress?|Durable Functions automatically checkpoint their progress whenever the function awaits, ensuring that local state is never lost.
What programming languages are supported by Durable Functions?|Durable Functions currently supports C#, JavaScript, Python, F#, and PowerShell.
What is the requirement for using JavaScript with Durable Functions?|JavaScript is supported only for version 2.x or later of the Azure Functions runtime and requires version 1.7.0 or later of the Durable Functions extension.
What is the requirement for using Python with Durable Functions?|Python requires version 2.3.1 or later of the Durable Functions extension.
What is the requirement for using F# with Durable Functions?|F# is supported with precompiled class libraries and F# script. F# script is only supported for version 1.x of the Azure Functions runtime.
What is the requirement for using PowerShell with Durable Functions?|PowerShell is supported only for version 3.x of the Azure Functions runtime and PowerShell 7, requiring version 2.x of the bundle extensions.
What is the installation requirement for using Durable Functions?|To use Durable Functions, you need to install a language-specific library into the root of your function app project.
What is function chaining in Durable Functions?|Function chaining is the pattern of executing a sequence of functions in a specific order.
How does Durable Functions handle function chaining?|Durable Functions allows for concise implementation of function chaining in code.
What is the fan-out/fan-in pattern in Durable Functions?|Fan-out/fan-in is the pattern of executing multiple functions in parallel and then waiting for them all to finish.
How does Durable Functions handle the fan-out/fan-in pattern?|Durable Functions simplifies the implementation of the fan-out/fan-in pattern with relatively simple code.
What problem does the Async HTTP API pattern address?|The Async HTTP API pattern addresses the coordination of long-running operations with external clients.
How do Durable Functions simplify the implementation of the Async HTTP API pattern?|Durable Functions provide built-in APIs that simplify the code for interacting with long-running function executions.
What does the Monitor pattern in Durable Functions refer to?|The Monitor pattern refers to a flexible recurring process in a workflow, allowing for dynamic recurrence intervals and task lifetime management.
How does Durable Functions handle human interaction in automated processes?|Durable Functions handle human interaction by incorporating timeouts and compensation logic.
What is the purpose of the Aggregator (stateful entities) pattern in Durable Functions?|The Aggregator pattern is about aggregating event data over time into a single, addressable entity.
