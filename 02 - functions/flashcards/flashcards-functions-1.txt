What is Azure Functions?|Azure Functions is a serverless solution that allows you to write less code, maintain less infrastructure, and save on costs.
What are triggers and bindings in Azure Functions?|Triggers are ways to start the execution of code, while bindings simplify coding for input and output data.
What is the difference between Azure Functions and Logic Apps?|Azure Functions is a serverless compute service, while Logic Apps is a serverless workflow integration platform. Both can create complex orchestrations.
How do you develop orchestrations in Azure Functions and Logic Apps?|In Azure Functions, orchestrations are developed by writing code and using the Durable Functions extension. In Logic Apps, orchestrations can be created using a GUI or editing configuration files.
What are some differences between Azure Functions and Logic Apps?|Azure functions are code-first (imperative), Logic Apps are Designer-first (declarative). Azure functions have built-in binding types, while Logic Apps have connectors. Azure functions monitor activity using Azure Application Insights, while Logic Apps use Azure Monitor Logs. Azure functions are managed via REST API and Visual Studio, while Logic Apps are managed through Azure Portal, REST API, PowerShell, and Visual Studio. Azure functions can run in Azure or locally, while Logic Apps can run in Azure, locally, or on premises.
What are some factors to consider when choosing between Azure Functions and WebJobs with the WebJobs SDK?|Azure Functions support the serverless app model with automatic scaling, can be tested in the browser, and have pay-per-use pricing. WebJobs do not have these features.
What are the advantages of Azure Functions over Azure App Service WebJobs?|Azure Functions offer more developer productivity, support for multiple programming languages, integration with various Azure services, and flexible pricing options compared to Azure App Service WebJobs.
What are the three basic hosting plans available for Azure Functions?|Consumption plan, Premium plan, and Dedicated plan.
What factors are dictated by the hosting plan chosen for a function app?|The scaling behavior of the function app, the resources available to each instance, and support for advanced functionality like Azure Virtual Network connectivity.
What are the benefits of the Consumption plan for Azure Functions?|Automatic scaling, pay-per-use pricing, and dynamic addition or removal of instances based on incoming events.
What are the benefits of the Premium plan for Azure Functions?|Automatic scaling, pre-warmed workers for minimal delay, runs on more powerful instances, and connectivity to virtual networks.
What is the Dedicated plan for Azure Functions best suited for?|Long-running scenarios where Durable Functions cannot be used.
What are the two other hosting options for running function apps with greater control and isolation?|App Service Environment (ASE) and Kubernetes (Direct or Azure Arc).
How do the Consumption plan and Premium plan scale in Azure Functions?|They both scale automatically based on incoming trigger events or function invocations.
What are the scaling options for the Dedicated plan and ASE in Azure Functions?|They allow manual or autoscaling with a maximum number of instances ranging from 10 to 100, depending on the plan.
How does autoscaling work for Kubernetes hosting in Azure Functions?|Autoscaling is event-driven using KEDA, and the maximum number of instances varies by cluster.
What does the functionTimeout property in host.json specify for Azure Functions?|The timeout duration for function executions.
What type of storage account is required for a function app in Azure Functions?|A general Azure Storage account that supports Azure Blob, Queue, Files, and Table storage.
Why should a separate storage account be used for storage-intensive operations in Azure Functions?|To ensure optimal performance and avoid potential resource contention.
What are the two additional hosting options for running function apps with greater control and isolation?|App Service Environment (ASE) and Kubernetes (Direct or Azure Arc).
What does the functionTimeout property in host.json specify for Azure Functions?|The timeout duration for function executions.
What type of storage account is required for a function app in Azure Functions?|A general Azure Storage account that supports Azure Blob, Queue, Files, and Table storage.
Why should a separate storage account be used for storage-intensive operations in Azure Functions?|To ensure optimal performance and avoid potential resource contention.
What are the benefits of using the Consumption plan in Azure Functions?|Automatic scaling, pay-per-use pricing, and dynamic addition or removal of instances based on incoming events.
What are the benefits of using the Premium plan in Azure Functions?|Automatic scaling, pre-warmed workers for minimal delay, runs on more powerful instances, and connectivity to virtual networks.
When is the Dedicated plan for Azure Functions the best choice?|For long-running scenarios where Durable Functions cannot be used.
How do the Consumption plan and Premium plan scale in Azure Functions?|They both scale automatically based on incoming trigger events or function invocations.
What are the scaling options for the Dedicated plan and ASE in Azure Functions?|They allow manual or autoscaling with a maximum number of instances ranging from 10 to 100, depending on the plan.
How does autoscaling work for Kubernetes hosting in Azure Functions?|Autoscaling is event-driven using KEDA, and the maximum number of instances varies by cluster.
What are the hosting plan options available for Azure Functions?|Consumption plan, Premium plan, and Dedicated plan.
What factors are determined by the hosting plan chosen for a function app in Azure Functions?|Scaling behavior, available resources per instance, and support for advanced functionality like Azure Virtual Network connectivity.
What is the purpose of an App Service Environment (ASE) in Azure Functions?|To provide a fully isolated and dedicated environment for securely running App Service apps at high scale.
What is the role of Kubernetes in Azure Functions hosting?|To offer a fully isolated and dedicated environment running on top of the Kubernetes platform.


