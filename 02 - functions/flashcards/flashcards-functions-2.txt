What is the purpose of the functionTimeout property in host.json for Azure Functions?|To specify the maximum duration for function executions.
What are the storage account requirements for a function app in Azure Functions?|A general Azure Storage account that supports Azure Blob, Queue, Files, and Table storage.
What determines the scaling of CPU and memory resources in Azure Functions for the Consumption and Premium plans?|The scaling of CPU and memory resources in Azure Functions for the Consumption and Premium plans is determined by the number of events that trigger a function.
What are the limitations of each instance in the Consumption plan?|Each instance in the Consumption plan is limited to 1.5 GB of memory and one CPU. The instance represents the entire function app, and all functions within the app share resources and scale together.
Where are the function code files stored in Azure Functions?|The function code files are stored on Azure Files shares in the function's main storage account.
What happens to the function code files when you delete the main storage account of a function app?|When you delete the main storage account of a function app, the function code files are also deleted and cannot be recovered.
What is the role of the scale controller in Azure Functions?|The scale controller in Azure Functions monitors event rates and determines whether to scale out or scale in. It uses heuristics specific to each trigger type to make scaling decisions.
What is the unit of scale in Azure Functions?|The unit of scale in Azure Functions is the function app. Scaling out allocates more resources to run multiple instances of the Functions host, while scaling in removes function host instances as compute demand decreases.
What are the maximum number of instances a single function app can scale out to in Azure Functions?|A single function app can scale out to a maximum of 200 instances in Azure Functions. However, a single instance can handle multiple messages or requests concurrently.
What is the rate at which new instances are allocated for HTTP triggers and non-HTTP triggers in Azure Functions?|For HTTP triggers, new instances are allocated at most once per second. For non-HTTP triggers, new instances are allocated at most once every 30 seconds.
How can you restrict the maximum number of instances for an Azure Functions app?|You can restrict the maximum number of instances for an Azure Functions app by modifying the functionAppScaleLimit value. The value can be set to a specific number between 1 and the app's maximum or 0/null for unrestricted scaling.
What is serverless architecture?|Serverless architecture involves fully managed cloud services where infrastructure is abstracted away and users are billed based on their specific tasks.
What are the characteristics of a serverless service?|The characteristics of a serverless service include elasticity, scalability, availability, durability, and security.
How does serverless architecture provide cost efficiency?|Serverless architecture is cost-efficient as it can scale down to zero when not in use, and users only pay for the actual task execution.
What analogy can be used to understand serverless architecture?|Serverless architecture can be compared to an energy rating label, where different services vary in their serverless characteristics.
What benefits does serverless architecture offer?|Serverless architecture eliminates server management, optimizes resource utilization, and provides a flexible, efficient, and secure cloud computing model.
What makes Azure Functions easier to work with?|Azure Functions are easier to write and deploy.
Why are Azure Functions fast to execute?|Azure Functions have no large application, startup time, or initialization events before code execution.
When are Azure Functions triggered?|Azure Functions' execution is triggered by fired events.
How do Azure Functions handle infrastructure?|Azure Functions require no infrastructure maintenance and have zero infrastructure needs.
Where can Azure Functions be built and deployed?|Azure Functions can be built, tested, and deployed in the Azure portal using a browser.
What is the advantage of upgrading Azure Functions?|Upgrading Azure Functions is easy and doesn't impact other parts of the website.
How do Azure Functions communicate with other systems?|Azure Functions use industry standard protocols and can interact with APIs, databases, and libraries.
What is the payment model for Azure Functions?|You only pay for Azure Functions while they are running.
How does Azure Functions handle scaling?|Azure Functions automatically scale to meet traffic demand by provisioning more serverless containers.
What is the cost benefit of scaling in Azure Functions?|Azure Functions can scale to zero cost when not in use.
What monitoring capabilities does Azure Functions have?|Azure Functions have built-in monitoring through Azure Monitor.
What CI/CD capabilities does Azure Functions have?|Azure Functions have built-in CI/CD through Azure DevOps.
What are the key features of Azure Functions?|Azure Functions are event-driven and trigger based on event data while also emitting event data.