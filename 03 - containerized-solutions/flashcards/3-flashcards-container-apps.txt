What does Azure Container Apps provide?|Azure Container Apps provides a serverless container service built for microservice applications and robust autoscaling capabilities without the overhead of managing complex infrastructure.
What are some common uses of Azure Container Apps?|Some common uses of Azure Container Apps include deploying API endpoints, hosting background processing applications, handling event-driven processing, and running microservices.
How can applications built on Azure Container Apps dynamically scale?|Applications built on Azure Container Apps can dynamically scale based on HTTP traffic, event-driven processing, CPU or memory load, and any KEDA-supported scaler.
What are the capabilities of Azure Container Apps?|Azure Container Apps allows you to run multiple container revisions, manage the container app's application lifecycle, autoscale your apps based on any KEDA-supported scale trigger, enable HTTPS ingress, split traffic across multiple versions of an application, use internal ingress and service discovery, build microservices with Dapr, run containers from any registry, manage applications using Azure CLI, Azure portal or ARM templates, provide an existing virtual network, securely manage secrets, and monitor logs using Azure Log Analytics.
What is an Azure Container Apps environment?|An Azure Container Apps environment is a secure boundary around groups of container apps, where individual container apps are deployed. Container Apps in the same environment are deployed in the same virtual network and write logs to the same Log Analytics workspace.
Why would you deploy container apps to the same environment in Azure Container Apps?|You would deploy container apps to the same environment in Azure Container Apps to manage related services, deploy different applications to the same virtual network, instrument Dapr applications that communicate via the Dapr service invocation API, have applications share the same Dapr configuration, and have applications share the same log analytics workspace.
Why would you deploy container apps to different environments in Azure Container Apps?|You would deploy container apps to different environments in Azure Container Apps to ensure that two applications never share the same compute resources and that two Dapr applications can't communicate via the Dapr service invocation API.
What are the features of microservices in Azure Container Apps?|Microservices in Azure Container Apps provide independent scaling, versioning, and upgrades, service discovery, and native Dapr integration.
How does Dapr integration enhance microservices in Azure Container Apps?|Dapr integration enhances microservices in Azure Container Apps by providing features like observability, pub/sub, service-to-service invocation with mutual TLS, retries, and more.
How does Azure Container Apps manage containers and container orchestration?|Azure Container Apps manages the details of Kubernetes and container orchestration for you, allowing containers in Azure Container Apps to use any runtime, programming language, or development stack of your choice.
Can you define multiple containers in a single container app in Azure Container Apps?|Yes, you can define multiple containers in a single container app in Azure Container Apps, which allows you to implement the sidecar pattern where containers share hard disk and network resources and experience the same application lifecycle.
How can you deploy images hosted on private registries in Azure Container Apps?|You can deploy images hosted on private registries in Azure Container Apps by providing credentials in the Container Apps configuration and defining the required fields in the registries array of the container app resource template.
What is the role of Azure Kubernetes Service in Azure Container Apps?|Azure Container Apps runs on top of Azure Kubernetes Service, providing a serverless platform for running microservices and containerized applications.
What are the scaling triggers for applications built on Azure Container Apps?|Applications built on Azure Container Apps can scale based on HTTP traffic, event-driven processing, CPU or memory load, and any KEDA-supported scaler.
How can you enable HTTPS ingress in Azure Container Apps?|In Azure Container Apps, you can enable HTTPS ingress without having to manage other Azure infrastructure.
What are the benefits of traffic splitting in Azure Container Apps?|Traffic splitting allows you to split traffic across multiple versions of an application for Blue/Green deployments and A/B testing scenarios.
What is the purpose of internal ingress and service discovery in Azure Container Apps?|Internal ingress and service discovery in Azure Container Apps enable secure internal-only endpoints with built-in DNS-based service discovery.
How can you build microservices in Azure Container Apps?|In Azure Container Apps, you can build microservices with Dapr and access its rich set of APIs.
Which container registries can you use in Azure Container Apps?|You can run containers from any registry, public or private, including Docker Hub and Azure Container Registry (ACR) in Azure Container Apps.
What are the options for managing applications in Azure Container Apps?|You can manage your applications in Azure Container Apps using the Azure CLI extension, Azure portal, or ARM templates.
What is the benefit of providing an existing virtual network in Azure Container Apps?|Providing an existing virtual network when creating an environment for your container apps in Azure Container Apps offers network isolation and connectivity options.
How can you securely manage secrets in Azure Container Apps?|In Azure Container Apps, you can securely manage secrets directly in your application.
What is the recommended approach for monitoring logs in Azure Container Apps?|The recommended approach for monitoring logs in Azure Container Apps is by using Azure Log Analytics.
What are the limitations of Azure Container Apps?|Azure Container Apps has limitations such as not being able to run privileged containers and requiring Linux-based (linux/amd64) container images.
What are the authentication and authorization features available in Azure Container Apps?|Azure Container Apps provides built-in authentication and authorization features to secure external ingress-enabled container apps with minimal or no code.
What are the built-in authentication providers in Azure Container Apps?|Azure Container Apps provides access to various built-in authentication providers, including Microsoft Identity Platform, Facebook, GitHub, Google, Twitter, and Any OpenID Connect provider.
What are the settings for restricting app access in Azure Container Apps?|In Azure Container Apps, you can set the "Restrict access" setting to "Require authentication" to restrict app access only to authenticated users, or set it to "Allow unauthenticated access" to authenticate but not restrict access.
What does the authentication and authorization middleware component do?|The authentication and authorization middleware component authenticates users and clients, manages the authenticated session, and injects identity information into HTTP request headers.
How does the authentication and authorization module run in relation to the application code?|The authentication and authorization module runs in a separate container, isolated from the application code.
What are the two authentication flows mentioned?|The two authentication flows mentioned are the server-directed flow (server flow) and the client-directed flow (client flow).
How does the server-directed flow work?|The server-directed flow delegates federated sign-in to Container Apps, typically presenting the provider's sign-in page to the user.
In the client-directed flow, how is authentication handled?|In the client-directed flow, the application manually signs users into the provider and submits the authentication token to Container Apps for validation, without presenting the provider's sign-in page to the user.
How does Azure Container Apps manage revisions?|Azure Container Apps implements container app versioning by creating revisions, which are immutable snapshots of a container app version.
Can revisions be used to revert to an earlier version of an app?|Yes, revisions can be used to quickly revert to an earlier version of an app.
What is used to identify a revision in Azure Container Apps?|Revision names are used to identify a revision and in the revision's URL.
How can you control active revisions and external traffic in Azure Container Apps?|You can control which revisions are active and the external traffic routed to each active revision.
How can you update a container app in Azure Container Apps?|You can update a container app using the "az containerapp update" command, which allows modifications to environment variables, compute resources, scale parameters, and deploy a different image.
How can you manage secrets in Azure Container Apps?|Azure Container Apps allows you to securely store sensitive configuration values as secrets.
How are secrets scoped in Azure Container Apps?|Secrets are scoped to an application, outside of any specific revision of an application.
What happens when you add, remove, or change secrets in Azure Container Apps?|Adding, removing, or changing secrets does not generate new revisions.
Can multiple revisions reference the same secret(s) in Azure Container Apps?|Yes, multiple revisions can reference the same secret(s).
How can you access secrets from your application code in Azure Container Apps?|In Azure Container Apps, you can access secrets from your application code or reference secure values in your Dapr components.
Does Container Apps support Azure Key Vault integration?|No, Container Apps doesn't support Azure Key Vault integration. Instead, you can enable managed identity in the container app and use the Key Vault SDK in your app to access secrets.
How can you define secrets in a container app?|Secrets are defined using the `--secrets` parameter when creating a container app. Each secret is specified as a space-delimited name/value pair.
What is Dapr?|Dapr (Distributed Application Runtime) is a set of features that simplify the authoring of distributed, microservice-based applications.
What are the different channels provided by Azure Container Apps to configure Dapr?|Azure Container Apps provides three channels to configure Dapr: Container Apps CLI, Infrastructure as Code (IaC) templates, and the Azure portal.
