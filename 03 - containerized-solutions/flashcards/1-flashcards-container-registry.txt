What is Azure Container Registry (ACR)?|A managed, private Docker registry service based on the open-source Docker Registry 2.0.
What can you do with Azure Container Registry (ACR)?|You can use it with your existing container development and deployment pipelines or use Azure Container Registry Tasks to build container images in Azure.
Name some use cases for pulling images from an Azure container registry.|Scalable orchestration systems and Azure services for building and running applications at scale.
How can developers push to a container registry as part of a container development workflow?|They can target a container registry from a continuous integration and delivery tool such as Azure Pipelines or Jenkins.
What are the service tiers available for Azure Container Registry?|Basic, Standard, and Premium.
What are the features of the Premium service tier?|It provides the highest amount of included storage and concurrent operations, along with features like geo-replication, content trust, and private link with private endpoints.
What types of images and artifacts can be stored in Azure Container Registry?|Docker container images, Helm charts, and images built to the OCI Image Format Specification.
How can you automate image builds in Azure Container Registry?|You can use Azure Container Registry Tasks (ACR Tasks) to streamline the process.
What storage capabilities does Azure Container Registry offer?|Encryption-at-rest for image data security, regional storage, geo-redundancy, zone redundancy (in the Premium tier), and scalable storage.
What should you periodically do to maintain your registry's performance?|Delete unused repositories, tags, and images.
What does ACR Tasks provide?|ACR Tasks provides cloud-based container image building for platforms including Linux, Windows, and Azure Resource Manager, and can automate OS and framework patching for Docker containers.
What are the scenarios supported by ACR Tasks?|ACR Tasks supports scenarios such as quick tasks, automatically triggered tasks, and multi-step tasks for building and maintaining container images and other artifacts.
What is the purpose of ACR Tasks' quick task feature?|The quick task feature of ACR Tasks provides an integrated development experience by offloading container image builds to Azure, allowing you to verify build definitions and catch potential problems prior to committing code.
How can you trigger a container image build or multi-step task using ACR Tasks?|You can trigger a container image build or multi-step task in ACR Tasks by configuring triggers based on source code updates, base image updates, or by scheduling tasks.
What is an example of a trigger in ACR Tasks?|An example of a trigger in ACR Tasks is triggering a container image build when code is committed or updated in a Git repository in GitHub or Azure DevOps Services.
How can ACR Tasks handle base image updates?|ACR Tasks can automatically build application images based on an updated base image pushed to the registry or when a base image is updated in a public repository like Docker Hub.
How can you schedule a task in ACR Tasks?|You can schedule a task in ACR Tasks by setting up one or more timer triggers, allowing you to run container workloads on a defined schedule or perform maintenance operations or tests on regularly pushed images.
What are multi-step tasks in ACR Tasks?|Multi-step tasks in ACR Tasks are defined in a YAML file and specify individual build and push operations for container images or other artifacts, including the execution of one or more containers in each step.
What can you do by specifying the --platform tag in ACR Tasks?|By specifying the --platform tag, you can build Windows images or Linux images for other architectures, specifying the OS and optionally a supported architecture or variant.
What is a Dockerfile?|A Dockerfile is a script containing instructions used to build a Docker image, including information about the base image, software installation, build artifacts, exposed services, and the command to run when the container is launched.
How do you choose a base image in a Dockerfile?|In a Dockerfile, you choose a base image by using the "FROM" command followed by the image's repository and tag, such as choosing a Microsoft .NET image as the base for a .NET application.
What does the "COPY" command do in a Dockerfile?|The "COPY" command in a Dockerfile copies the contents of a specified directory or file from the host machine to a specific location inside the container, allowing you to include build artifacts in the image.
What does the "EXPOSE" command do in a Dockerfile?|The "EXPOSE" command in a Dockerfile specifies the ports on which a container listens for connections, enabling communication with the container from the outside world.
What is the purpose of the "CMD" command in a Dockerfile?|The "CMD" command in a Dockerfile specifies the command to run when the container starts, such as running a specific application or executing a script.
